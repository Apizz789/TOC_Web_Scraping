{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MrZOMBIT\\\\Desktop\\\\2021\\\\Works\\\\CE3D\\\\Software Studio\\\\TOC_Web_Scraping\\\\web_scraping\\\\src\\\\components\\\\Searchbox.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react/cjs/react.production.min';\nimport '../css/searchbox.style.css';\nimport { Trie } from \"./trie.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Searchbox() {\n  _s();\n\n  const [prefix, setPrefix] = useState(\"\");\n  const [suggestion, setSuggestion] = useState(\"\"); // const getWords = async() => {\n  //   const url = 'https://raw.githubusercontent.com/EKaxada/webster-words/main/dict.json'\n  //   const res = await fetch(url, {\n  //     method: 'GET'\n  //   });\n  //   return await res.json();\n  // }\n\n  const dictionary = {\n    words: ['hello', 'helium', 'world', 'car', 'carpet', 'test', 'this', 'that', 'those', 'working', 'is']\n  };\n  var myTrie = new Trie();\n\n  (async () => {\n    // const dictionary = await getWords();\n    const words = dictionary.words;\n\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      myTrie.insert(word);\n    }\n  })();\n\n  const onChange = e => {\n    var value = e.target.value;\n    setPrefix(value);\n    var words = value.split(\" \");\n    var trie_prefix = words[words.length - 1].toLowerCase();\n    var found_words = myTrie.find(trie_prefix).sort((a, b) => {\n      return a.length - b.length;\n    });\n    var first_word = found_words[0];\n\n    if (found_words.length !== 0 && value !== \"\" && value[value.length - 1] !== \" \") {\n      if (first_word != null) {\n        var remainder = first_word.slice(trie_prefix.length);\n        setSuggestion(value + remainder);\n      }\n    } else {\n      setSuggestion(value);\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.keyCode === 39) {\n      setPrefix(suggestion);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Seaerchbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"search-bar\",\n      id: \"search-bar\",\n      placeholder: \"Search...\",\n      value: prefix,\n      onChange: onChange,\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"search-bar\",\n      id: \"search-bar2\",\n      value: suggestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Searchbox, \"F4O5XQpIzZQE6OVCyyGWXTDz6ec=\");\n\n_c = Searchbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Searchbox\");","map":{"version":3,"sources":["C:/Users/MrZOMBIT/Desktop/2021/Works/CE3D/Software Studio/TOC_Web_Scraping/web_scraping/src/components/Searchbox.js"],"names":["React","useState","Trie","Searchbox","prefix","setPrefix","suggestion","setSuggestion","dictionary","words","myTrie","i","length","word","insert","onChange","e","value","target","split","trie_prefix","toLowerCase","found_words","find","sort","a","b","first_word","remainder","slice","handleKeyDown","keyCode"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react/cjs/react.production.min';\r\nimport '../css/searchbox.style.css'\r\nimport {Trie} from \"./trie.js\";\r\n\r\n\r\n  \r\nexport default function Searchbox() {\r\n    const [prefix, setPrefix] = useState(\"\")\r\n    const [suggestion, setSuggestion] = useState(\"\")\r\n  \r\n    // const getWords = async() => {\r\n    //   const url = 'https://raw.githubusercontent.com/EKaxada/webster-words/main/dict.json'\r\n    //   const res = await fetch(url, {\r\n    //     method: 'GET'\r\n    //   });\r\n    //   return await res.json();\r\n    // }\r\n  const dictionary = {\r\n    words: ['hello','helium','world','car','carpet','test','this','that','those','working','is']\r\n  }\r\n    var myTrie = new Trie();\r\n  \r\n    (   async()=>{\r\n        // const dictionary = await getWords();\r\n        const words = dictionary.words;\r\n        for (let i = 0; i < words.length; i++) {\r\n            const word = words[i];\r\n            myTrie.insert(word)\r\n        }\r\n    })();\r\n  \r\n    const onChange = (e) => {\r\n      var value = e.target.value;\r\n      setPrefix(value);\r\n      var words = value.split(\" \");\r\n      var trie_prefix = words[words.length - 1].toLowerCase();\r\n      var found_words = myTrie.find(trie_prefix).sort((a, b) => {\r\n        return a.length - b.length;\r\n      });\r\n      var first_word = found_words[0];\r\n      if (\r\n        found_words.length !== 0 &&\r\n        value !== \"\" &&\r\n        value[value.length - 1] !== \" \"\r\n      ) {\r\n        if (first_word != null) {\r\n          var remainder = first_word.slice(trie_prefix.length);\r\n          setSuggestion(value + remainder);\r\n        }\r\n      } else {\r\n        setSuggestion(value);\r\n      }\r\n    };\r\n  \r\n    const handleKeyDown = (e) => {\r\n      if (e.keyCode === 39) {\r\n        setPrefix(suggestion);\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div className=\"Seaerchbox\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"search-bar\"\r\n          id=\"search-bar\"\r\n          placeholder=\"Search...\"\r\n          value={prefix}\r\n          onChange={onChange}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"search-bar\"\r\n          id=\"search-bar2\"\r\n          value={suggestion}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\n    "]},"metadata":{},"sourceType":"module"}